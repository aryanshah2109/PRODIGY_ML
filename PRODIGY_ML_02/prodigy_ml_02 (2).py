# -*- coding: utf-8 -*-
"""PRODIGY_ML_02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EendX8bBSD4rCqwhv0NKSIgtJTFNDeKY
"""

# Dependencies
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import pickle as pkl


# Get the directory of the current script
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Define data and models paths
DATA_PATH = os.path.join(BASE_DIR, 'data', 'Mall_Customers.csv')
MODELS_DIR = os.path.join(BASE_DIR, 'models')

# Create models directory if it doesn't exist
os.makedirs(MODELS_DIR, exist_ok=True)

# Load data with error handling
try:
    data = pd.read_csv(DATA_PATH)
except FileNotFoundError:
    raise FileNotFoundError(f"Data file not found at {DATA_PATH}. Please ensure Mail_Customers.csv is in the data folder.")

# drop unnecessary columns
data.drop('CustomerID',axis=1,inplace=True)

transformer = ColumnTransformer(transformers=[
    ('ohe',OneHotEncoder(sparse_output=False,dtype=np.int32,drop='first'),['Gender'])
],remainder='passthrough')

X = transformer.fit_transform(data)

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

wcss = []
for i in range(1,11):
  km = KMeans(n_clusters=i,random_state=43)
  km.fit_predict(X_scaled)
  wcss.append(km.inertia_)

plt.plot(range(1,11),wcss)
plt.title("WCSS vs K values")
plt.xlabel('K values')
plt.ylabel('WCSS score')
plt.show()

km = KMeans(n_clusters=8,random_state=43)
y_means = km.fit_predict(X_scaled)

# Plotting clusters
plt.figure(figsize=(8,6))
sns.scatterplot(x=X_scaled[:, 2], y=X_scaled[:, 3], hue=y_means, palette='tab10')
plt.title("Customer Clusters (K = 8)")
plt.xlabel("Spending Score")
plt.ylabel("Annual Income")
plt.show()


# Calculating Silhouette Score
silhouette_scores = []

# Try k from 2 to 10
for k in range(2, 11):
    kmeans = KMeans(n_clusters=k, random_state=43)
    labels = kmeans.fit_predict(X_scaled)
    score = silhouette_score(X_scaled, labels)
    silhouette_scores.append(score)

# Plotting silhouette score
plt.plot(range(2, 11), silhouette_scores, marker='o')
plt.title("Silhouette Scores for k = 2 to 10")
plt.xlabel("Number of clusters (k)")
plt.ylabel("Silhouette Score")
plt.grid(True)
plt.show()


# Saving model
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
MODELS_DIR = os.path.join(BASE_DIR, 'models')
os.makedirs(MODELS_DIR, exist_ok=True)

with open(os.path.join(MODELS_DIR, 'MallCustomers.pkl'), 'wb') as f:
  pkl.dump(km, f)


